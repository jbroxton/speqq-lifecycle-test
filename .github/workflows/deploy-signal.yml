name: Deployment Signal

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PRs associated with this commit SHA
            let prNumbers = [];
            try {
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              });
              prNumbers = prs.data.map(pr => pr.number);
              core.info(`PRs associated with ${context.sha}: ${prNumbers.join(',') || 'none'}`);
            } catch (e) {
              core.warning(`Could not fetch associated PRs: ${e.message}`);
            }
            
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ inputs.environment || 'production' }}',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploying via Speqq lifecycle tracking',
              payload: {
                pr_numbers: prNumbers
              }
            });
            
            console.log(`Created deployment: ${deployment.data.id}`);
            console.log(`With PR numbers: ${prNumbers.join(',') || 'none'}`);
            core.setOutput('deployment_id', deployment.data.id);
            return deployment.data.id;
      
      - name: Simulate deployment
        run: |
          echo "Deploying commit ${{ github.sha }} to ${{ inputs.environment || 'production' }}"
          echo "Deployment ID: ${{ steps.create_deployment.outputs.deployment_id }}"
          # Add actual deployment steps here
          sleep 2  # Simulate deployment time
      
      - name: Update deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'success',
              environment: '${{ inputs.environment || 'production' }}',
              environment_url: 'https://app.example.com',
              description: 'Deployment completed successfully'
            });
            
            console.log('Deployment marked as success');
      
      - name: Update deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'failure',
              environment: '${{ inputs.environment || 'production' }}',
              description: 'Deployment failed'
            });